#ROS中的图像数据。
##启动摄像头：没有安装的话参照下面命令安装一下：
  sudo apt-get install ros-kinetic-usb-cam
##安装完成之后就可以启动摄像头了：
  roslaunch usb_cam usb_cam-test.launch
(里面的具体的成员变量的解释如下：

    Header：很多话题消息里面都包含的。里面有三个内容：消息头，包含消息序号，时间戳和绑定坐标系。消息的序号表示我们这个消息发布是排第几位的，并不需要我们手动去标定，每次发布消息的时候会自动地去累加; 绑定坐标系表示的是我们是针对哪一个坐标系去发布的。header有时候也不需要去配置。
    height：图像的纵向分辨率
    width：图像的横向分辨率
    encoding：图像的编码格式，包含RGB、YUV等常用格式，都是原始图像的编码格式，不涉及图像压缩编码;
    is_bigendian: 图像数据的大小端存储模式;
    step：一行图像数据的字节数量，作为数据的步长参数;
    data：存储图像数据的数组，大小为step×height个字节。
    format：图像的压缩编码格式（jpeg、png、bmp）。
    data：存储图像数据数组。
)

#摄像头标定
##安装标定功能包：
  sudo apt-get install ros-kinetic-camera-calibration
##启动摄像头，需要先下载robot_vision包：
  roslaunch robot_vision usb_cam.launch
（错误提示：[usb_cam.launch] is neither a launch file in package [robot_vision] nor is [robot_vision] a launch file name
The traceback for the exception was written to the log file
）是因为没有做setup，创建工作区后无错误提示。
source develp/setup.bash
roslaunch robot_vision usb_cam.launch
##启动标定包rosrun camera_calibration cameracalibrator.py  --size 8x6 --square 0.024 image:=/usb_cam/image_raw camera:=/usb_cam

size：棋盘内部角点个数，范例为6行，8个角。
square：棋盘边长，单位M
image和camera：摄像头发布的图像话题
